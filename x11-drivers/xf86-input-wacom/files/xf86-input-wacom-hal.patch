diff --git a/configure.ac b/configure.ac
index 2ffadcc..21fdd30 100644
--- a/configure.ac
+++ b/configure.ac
@@ -66,6 +66,10 @@ AC_ARG_WITH([sdkdir], [],
     [sdkdir=`$PKG_CONFIG --variable=sdkdir xorg-server`])
 AC_SUBST([sdkdir])
 
+PKG_CHECK_MODULES(HAL, hal >= 0.5.0)
+AC_SUBST([HAL_CFLAGS])
+AC_SUBST([HAL_LIBS])
+
 # Checks for header files.
 AC_HEADER_STDC
 
diff --git a/src/10-xf86-input-wacom.fdi b/src/10-xf86-input-wacom.fdi
new file mode 100644
index 0000000..f0b6ab2
--- /dev/null
+++ b/src/10-xf86-input-wacom.fdi
@@ -0,0 +1,48 @@
+<?xml version="1.0" encoding="ISO-8859-1"?>
+<!-- this is probably a bit imprecise -->
+<deviceinfo version="0.2">
+  <device>
+    <match key="info.category" contains="input">
+      <match key="info.product" contains_outof="Wacom">
+	<merge key="input.x11_driver" type="string">wacom</merge>
+	<merge key="input.x11_options.Type" type="string">stylus</merge>
+	<append key="info.callouts.add" type="strlist">hal-setup-wacom</append>
+	<append key="wacom.types" type="strlist">eraser</append>
+	<append key="wacom.types" type="strlist">cursor</append>
+	<append key="wacom.types" type="strlist">pad</append>
+	<append key="wacom.types" type="strlist">touch</append>
+      </match>
+    </match>
+    <match key="info.capabilities" contains="serial">
+      <match key="@info.parent:pnp.id" contains_outof="WACf001;WACf002;WACf003;WACf004;WACf005;WACf006;WACf007;WACf008;WACf009;WACf00a;WACf00b;WACf00c;FUJ02e5">
+	<append key="info.capabilities" type="strlist">input</append>
+	<merge key="input.x11_driver" type="string">wacom</merge>
+	<merge key="input.x11_options.Type" type="string">stylus</merge>
+	<merge key="input.x11_options.ForceDevice" type="string">ISDV4</merge>
+	<merge key="input.device" type="copy_property">serial.device</merge>
+	<append key="info.callouts.add" type="strlist">hal-setup-wacom</append>
+	<append key="wacom.types" type="strlist">eraser</append>
+        <match key="@info.parent:pnp.id" contains_outof="WACf008;WACf009">
+	  <!-- Serial tablets with touch capabilities -->
+	  <append key="wacom.types" type="strlist">touch</append>
+	</match>
+      </match>
+    </match>
+  </device>
+  <!-- Match the Wacom Bluetooth A5 pen tablet -->
+  <device>
+    <match key="info.capabilities" contains="input.mouse">
+      <match key="info.product" contains="WACOM">
+        <match key="info.product" contains="Tablet">
+          <merge key="input.x11_driver" type="string">wacom</merge>
+          <merge key="input.x11_options.Type" type="string">stylus</merge>
+	  <append key="info.callouts.add" type="strlist">hal-setup-wacom</append>
+	  <append key="wacom.types" type="strlist">eraser</append>
+	  <append key="wacom.types" type="strlist">cursor</append>
+        </match>
+      </match>
+    </match>
+  </device>
+</deviceinfo>
+
+
diff --git a/src/Makefile.am b/src/Makefile.am
index e58ad9f..7070392 100644
--- a/src/Makefile.am
+++ b/src/Makefile.am
@@ -24,7 +24,7 @@
 # -avoid-version prevents gratuitous .0.0.0 version numbers on the end
 # _ladir passes a dummy rpath to libtool so the thing will actually link
 # TODO: -nostdlib/-Bstatic/-lgcc platform magic, not installing the .a, etc.
-AM_CFLAGS = $(XORG_CFLAGS)
+AM_CFLAGS = $(XORG_CFLAGS) $(HAL_CFLAGS)
 
 @DRIVER_NAME@_drv_la_LTLIBRARIES = @DRIVER_NAME@_drv.la
 @DRIVER_NAME@_drv_la_LDFLAGS = -module -avoid-version
@@ -37,3 +37,9 @@ INCLUDES=-I$(top_srcdir)/include/
 	wcmFilter.c wcmFilter.h xf86WacomDefs.h \
 	wcmTilt2Rotation.c wcmUSB.c wcmXCommand.c 
 
+libexec_PROGRAMS = hal-setup-wacom
+fdidir = $(prefix)/share/hal/fdi/policy/20thirdparty
+fdi_SCRIPTS = 10-xf86-input-wacom.fdi
+
+hal_setup_wacom_SOURCES = hal-setup-wacom.c
+hal_setup_wacom_LDADD = $(HAL_LIBS)
diff --git a/src/hal-setup-wacom.c b/src/hal-setup-wacom.c
new file mode 100644
index 0000000..dd6183c
--- /dev/null
+++ b/src/hal-setup-wacom.c
@@ -0,0 +1,156 @@
+/*
+ * Licensed under the GNU General Public License Version 2
+ *
+ * Copyright (C) 2009 Red Hat <mjg@redhat.com>
+ *
+ * This program is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU General Public License
+ * as published by the Free Software Foundation; either version 2
+ * of the License, or (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+ * 02110-1301, USA.
+ */
+
+#define _GNU_SOURCE
+#include <stdio.h>
+#include <stdlib.h>
+#include <errno.h>
+#include <string.h>
+#include <fcntl.h>
+#include <unistd.h>
+#include <sys/ioctl.h>
+
+#include <hal/libhal.h>
+
+static LibHalContext *ctx = NULL;
+static char* udi;
+
+int
+main (int argc, char **argv)
+{
+	char *device;
+	char *newudi;
+	char *forcedev;
+	char *name;
+	char *subname;
+	char **types;
+	int i;
+	DBusError error;
+
+	udi = getenv ("UDI");
+	if (udi == NULL) {
+		fprintf (stderr, "hal-setup-wacom: Failed to get UDI\n");
+		return 1;
+	}
+
+	asprintf (&newudi, "%s_subdev", udi);
+
+	dbus_error_init (&error);
+	if ((ctx = libhal_ctx_init_direct (&error)) == NULL) {
+		fprintf (stderr, "hal-setup-wacom: Unable to initialise libhal context: %s\n", error.message);
+		return 1;
+	}
+
+	dbus_error_init (&error);
+	if (!libhal_device_addon_is_ready (ctx, udi, &error)) {
+		return 1;
+	}
+
+	dbus_error_init (&error);
+
+	/* get the device */
+	device = libhal_device_get_property_string (ctx, udi, "input.device",
+						    &error);
+	if (dbus_error_is_set (&error) == TRUE) {
+		fprintf (stderr,
+			 "hal-setup-wacom: Failed to get input device: '%s'\n",
+			 error.message);
+		return 1;
+	}
+
+	/* Is there a forcedevice? */
+	dbus_error_init (&error);
+	forcedev = libhal_device_get_property_string
+		(ctx, udi, "input.x11_options.ForceDevice", &error);
+
+	dbus_error_init (&error);
+	name = libhal_device_get_property_string (ctx, udi, "info.product",
+						  &error);
+
+	dbus_error_init (&error);
+	types = libhal_device_get_property_strlist (ctx, udi, "wacom.types",
+						    &error);
+
+	if (dbus_error_is_set (&error) == TRUE) {
+		fprintf (stderr,
+			 "hal-setup-wacom: Failed to get wacom types: '%s'\n",
+			 error.message);
+		return 1;
+	}
+
+	/* Set up the extra devices */
+	for (i=0; types[i] != NULL; i++) {
+		char *tmpdev;
+
+		dbus_error_init (&error);
+		tmpdev = libhal_new_device(ctx, &error);
+		if (dbus_error_is_set (&error) == TRUE) {
+			fprintf (stderr,
+				 "hal-setup-wacom: Failed to create input device: '%s'\n",
+				 error.message);
+			return 1;
+		}
+		dbus_error_init (&error);
+		libhal_device_set_property_string (ctx, tmpdev, "input.device",
+						   device, &error);
+		dbus_error_init (&error);
+		libhal_device_set_property_string (ctx, tmpdev,
+						   "input.x11_driver", "wacom",
+						   &error);
+		dbus_error_init (&error);
+		libhal_device_set_property_string (ctx, tmpdev,
+						   "input.x11_options.Type",
+						   types[i], &error);
+		dbus_error_init (&error);
+		libhal_device_set_property_string (ctx, tmpdev, "info.parent",
+						   udi, &error);
+		dbus_error_init (&error);
+		libhal_device_property_strlist_append (ctx, tmpdev,
+						       "info.capabilities",
+						       "input", &error);
+		if (forcedev) {
+			dbus_error_init (&error);
+			libhal_device_set_property_string (ctx, tmpdev,
+							   "input.x11_options.ForceDevice",
+							   forcedev, &error);
+		}
+		if (name) {
+			dbus_error_init (&error);
+			asprintf (&subname, "%s %s", name, types[i]);
+			libhal_device_set_property_string (ctx, tmpdev,
+							   "info.product",
+							   subname, &error);
+			free (subname);
+		}
+		dbus_error_init (&error);
+		libhal_device_commit_to_gdl (ctx, tmpdev, newudi, &error);
+
+		if (dbus_error_is_set (&error) == TRUE) {
+			fprintf (stderr,
+				 "hal-setup-wacom: Failed to add input device: '%s'\n",
+				 error.message);
+			return 1;
+		}
+	}
+
+	return 0;
+}
+
